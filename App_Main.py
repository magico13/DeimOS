from datetime import datetime

from app import App
import utils
from utils import COLORS
import music_controller


class App_Main(App):
    time = datetime.now()

    def __init__(self):
        super(App_Main, self).__init__()
        self.Buttons, self.Texts = utils.load(self, 'App_Main.json')
        self.music = music_controller.music_controller()
        #self.music.load_playlist('/home/magico13/Music')
        self.GetTxtByID('txtMusicTitle').SetText(self.music.get_pretty_name())
        self.GetTxtByID('txtVolume').SetText('Volume: {}%'.format(self.music.volume*100))
        self.GetTxtByID('txtClock').SetText(self.time.strftime('%H:%M'))


    def FirstDraw(self, screen):
        #Draw the background
        self.DrawBackground(screen, (0, 0, 0))
        
        super(App_Main, self).FirstDraw(screen)

    def EventLoop(self, events):
        for event in events:
            if event.type == self.music.SONG_FINISHED:
                self.music.update()
                
        if (datetime.now().minute != self.time.minute):
            self.time = datetime.now()
            self.GetTxtByID('txtClock').SetText(self.time.strftime('%H:%M'))
            
        super(App_Main, self).EventLoop(events)

    def Draw(self, screen):
        worked = super(App_Main, self).Draw(screen)
        for button in self.Buttons:
            if worked: break
            worked |= button.updated
        for text in self.Texts:
            if worked: break
            worked |= text.updated
        if worked: self.FirstDraw(screen)
        return worked

    def musicPanel(self, btnID):
        #Autogenerated Method Stub
        print('musicPanel - {}'.format(btnID))

    def systemsPanel(self, btnID):
        #Autogenerated Method Stub
        print('systemsPanel - {}'.format(btnID))

    def settingsPanel(self, btnID):
        #Autogenerated Method Stub
        print('settingsPanel - {}'.format(btnID))

    def musicPlay(self, btnID):
        if self.music.playing:
            self.music.pause()
            self.GetButtonByID('btnMusicPlay').set_text('>')
        else:
            self.GetButtonByID('btnMusicPlay').set_text('||')
            self.music.play()
        self.GetTxtByID('txtMusicTitle').SetText(self.music.get_pretty_name())

    def musicSkip(self, btnID):
        self.music.skip_forward()
        self.GetTxtByID('txtMusicTitle').SetText(self.music.get_pretty_name())

    def volumeAdjust(self, btnID):
        if btnID == 'btnVolDown':
            self.music.volume_down()
        elif btnID == 'btnVolUp':
            self.music.volume_up()
        self.GetTxtByID('txtVolume').SetText('Volume: {}%'.format(self.music.volume*100))

    def engineToggle(self, btnID):
        #Autogenerated Method Stub
        print('engineToggle - {}'.format(btnID))

    def windowChange(self, btnID):
        #Autogenerated Method Stub
        print('windowChange - {}'.format(btnID))

    def windowAutoToggle(self, btnID):
        #Autogenerated Method Stub
        print('windowAutoToggle - {}'.format(btnID))

    def lightsChange(self, btnID):
        #Autogenerated Method Stub
        print('lightsChange - {}'.format(btnID))

    def lightsAutoToggle(self, btnID):
        #Autogenerated Method Stub
        print('lightsAutoToggle - {}'.format(btnID))

    def updateVersion(self, btnID):
        #Autogenerated Method Stub
        print('updateVersion - {}'.format(btnID))

